{% extends 'docs.html.twig' %}

{% block title %}Aeon PHP - Calendar Holidays - Documentation{% endblock %}

{% block body %}
    <div class="row doc-content-body">
        <article class="col-md-9">
            <section id="calendar-interface">
                <h5 class="section-title-2">Calendar Holidays</h5>
                <hr/>
                Available versions:
                <ul>
                    {% for version, src in versions %}
                        <li><a href="{{ path('docs_calendar_holidays_version', { version: version }) }}">{{ version }}</a></li>
                    {% endfor %}
                </ul>
            </section>
            <section>
                <h3>Installation</h3>
                <p>
                    <code class="code">composer require aeon-php/calendar-holidays</code>
                </p>
            </section>
            <section>
                <h3>Description</h3>
                <p>
                    This library provides simple but really flexible abstraction representing holidays of any type.
                </p>
            </section>
            <section>
                <h3>Abstraction</h3>

                <pre><code class="language-php">{% apply spaceless  %}
&lt;?php

use Aeon\Calendar\Gregorian\Day;
use Aeon\Calendar\Gregorian\Holidays\HolidayName;

interface Holidays
{
    public function isHoliday(Day $day) : bool;

    /**
     * @return array<int, Holiday>
     */
    public function holidaysAt(Day $day) : array;
}

final class Holiday
{
    public function __construct(Day $day, HolidayName $name) {}

    public function day() : Day {}

    public function name(?string $locale = null) : string {}
}
{% endapply %}</code></pre>
            </section>
            <section>
                <h3>Holiday Provider - Chain </h3>
                <pre><code class="language-php">{% apply spaceless  %}
&lt;?php

use Aeon\Calendar\Gregorian\Day;
use Aeon\Calendar\Gregorian\Holidays\GoogleCalendar\CountryCodes;
use Aeon\Calendar\Gregorian\Holidays\GoogleCalendarRegionalHolidays;
use Aeon\Calendar\Gregorian\Holidays\HolidaysChain;

$holidays = new HolidaysChain(
    new GoogleCalendarRegionalHolidays(CountryCodes::US),
    new CustomHolidays()
);

if ($holidays->isHoliday(Day::fromString('2020-01-01'))) {
    echo $holidays->holidaysAt(Day::fromString('2020-01-01'))[0]->name(); // New Year's Day
}
{% endapply %}</code></pre>

                <p>
                    <strong>Heads Up</strong> it returns holidays from all chained implementations so results might be duplicated.
                </p>
            </section>
            <section>
                <h3>Holiday Provider - Google Calendar Regional Holidays </h3>
                <pre><code class="language-php">{% apply spaceless  %}
&lt;?php

use Aeon\Calendar\Gregorian\Day;
use Aeon\Calendar\Gregorian\Holidays\GoogleCalendar\CountryCodes;
use Aeon\Calendar\Gregorian\Holidays\GoogleCalendarRegionalHolidays;

$holidays = new GoogleCalendarRegionalHolidays(CountryCodes::US);

if ($holidays->isHoliday(Day::fromString('2020-01-01'))) {
    echo $holidays->holidaysAt(Day::fromString('2020-01-01'))[0]->name(); // New Year's Day
}
{% endapply %}</code></pre>

                <p>
                    GoogleCalendarRegionalHolidays reads data from static json commited to the repository
                    and it only reads the file matching country code passed to the constructor.
                </p>
                <p>
                    <strong>Lazy initialization</strong>  - when <code>GoogleCalendarRegionalHolidays</code> is initialized it does not read the json files yet,
                    it only validates that country code is valid. It goes to the file first time you use <code>holidaysAt</code> or <code>isHoliday</code> and
                    even then the file is <a href="https://en.wikipedia.org/wiki/Memoization#:~:text=In%20computing%2C%20memoization%20or%20memoisation,the%20same%20inputs%20occur%20again" target="_blank">memoized</a>,
                    and stored as <code>GoogleCalendarRegionalHolidays</code> instance state so another usage of
                    any above method will not trigger parsing json files again.
                </p>
            </section>
            <section>
                <h3>Holiday Provider - Empty </h3>
                <pre><code class="language-php">{% apply spaceless  %}
&lt;?php
use Aeon\Calendar\Gregorian\Day;
use Aeon\Calendar\Gregorian\Holidays\EmptyHolidays;

$holidays = new EmptyHolidays();

if ($holidays->isHoliday(Day::fromString('2020-01-01'))) {
    // code dead as your brain after working without holidays
}
{% endapply %}</code></pre>

                <p>
                    This implementation does not provide any holidays, use it when you are a robot that works whole year with any break.
                </p>
            </section>
        </article>
        <aside class="col-md-3">
            <div class="sticky">
                <section class="text-center">
                    <a href="https://github.com/aeon-php/website/blob/1.x/templates/{{ _self }}" class="btn btn-secondary p-1" target="_blank"><i class="fab fa-github"></i> Edit this page</a>
                </section>
            </div>
        </aside>
    </div>
{% endblock %}
